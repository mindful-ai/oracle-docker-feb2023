Part 4:  Container Lifecycle
--------

docker create hello-world -> produces an ID
docker start -a <id> -> We see the effect of docker run

For listing container ids use docker ps
docker start -a <id> -> 

Understand the use -a and -i switches for docker start






Part 5: Restarting stopped containers
----------

docker ps -all
docker run busybox echo hi there
docker ps -all
    -> just because the container stopped, it doesnot mean it is dead or cannot
       be used again

docker start -a <id> -> will restart
It will start with the command with which it was started
Naturally stops after executing the default command
You cannot replace the default command

Try -> docker start -a <id> echo newcommand
Does it work>

Part 6:  Stopping/removing containers
-------- 

docker system prune
docker ps -all -> shows no containers 


Removes all the containers, Not the images!

Part 7: Logging the outputs
----------

docker create busybox echo hi there
docker start <id>
-> there is no -a options specified
-> This will be expensive because we will have to re-run to see the results on console

docker logs <id> -> gives information with out Restarting

Part 8: Stopping containers
---------

docker create busybox ping google.com

docker start <id>
docker logs <id>

otherwise issue docker start -a <id>

docker ps
    -> continuing, send a signal to stopped

docker stop <id> -> observe docker give 10S and then automatically kills
docker kill <id> -> no grace period here

Part 9: Multi-command Containers
---------

docker run redis

In a separate terminal:
docker ps
docker exec -it 681a726b5e3d redis-cli

Issue redis commands:
ping
set key 78
get key

Part 10: Terminal access
-------------

docker exec -it 681a726b5e3d sh

ls 
ls -l 
mkdir test
ls - later

You can also invoke redis-cli

redis-cli <-

Part 11: Starting with a shell
---------------

docker run -it busybox sh


Part 12: Container isolation
-----------

Terminal 1: docker run -it busybox sh
Create a file/directory inside it

Terminal 2: docker run -it busybox sh
Create a another file/directory inside it

Examine both the containers

Part 13: Removing images and containers
-----------

docker ps -> containers
docker rm <container id> -> to remove container

docker images -> images
docker rmi -f <image name> -> to remove an image

Part 14: Inspecting the images
------------

docker image inspect redis
