--------------------------------------------------------------------------------------------------------
Lab 05: Docker Images
--------------------------------------------------------------------------------------------------------

Part 1: Building a Docker Image
------------

Objective: to create an image that runs redis server

mkdir redis-image
cd redis-image
--------------------------------------------
Invoke VSC: code .

Create a file: Dockerfile

# Use an existing image as the base image
# Download and install dependencies
# Tell the image what to do

FROM alpine
RUN apk add --update redis (not a docker command, apache package manager)
CMD ["redis-server"]

Build-kit enabled by default.
Preferences -> Docker Engine -> False

--------------------------------------------

docker build .
docker run <id>

Part 2: Observe the docker build process
------------

docker build .
Observe the temporary ids cretaed along the way while build is happening

Part 3: Re-builds from cache
-------------

Add an extra command to install gcc
RUN apk add -update gcc
after redis command

In the second pass,
put that command before redis and observe the results

What do you infer?


Part 4: Tagging the Images
--------------

docker build -t purushotham1982/redis:latest .
docker ps -all

Part 5: Docker commit -> manual configuration
------------

Note: This is not quite often used in the production environment

Terminal: 1

docker run -it alpine sh
# apk add --update redis -> on the shell

Terminal : 2

Get the id of the running container in terminal 1, say 681a726b5e3d

docker commit -c 'CMD ["redis-server"]' 681a726b5e3d
You get a really long id. Don't forget the space!!

You can now run that manually customized container
docker run <just use first few numbers of the id>
